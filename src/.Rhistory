# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
#rm(ukb) # delete UKB variable from workspace to save RAM
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
##### for testing with NeuroPM Box
# reduce computational cost by only taking a fraction of whole dataset
# use function to convert and wrute into neuroPM toolbox inputs files (3 files)
if (FALSE) {
ukb_df_small = return_fractional_df(ukb_df, 3000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
}
# compute neighborhood variance
# #
# functions to perform cPCA
# # #http://www.bioconductor.org/packages/devel/bioc/vignettes/scPCA/inst/doc/scpca_intro.html
# calculate pseudotime score
# #
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
ukb$ukb_data$Sex
ukb$ukb_data[,"Sex"]
ukb$ukb_data[,"6150-2.0"]
ukb$ukb_data[,"diag_min_datedif"]
ukb$ukb_data[,"sex"]
ukb$ukb_data[,"sex]
_
)
))
]
""
"
ukb$ukb_data[,"31-0.0"]
class(ukb$ukb_data[,"31-0.0"])
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
View(ukb_df)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
View(ukb_df)
View(ukb_df)
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
?cat
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
ukb_df_small = return_fractional_df(ukb_df, 5000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
file.path
# load output from neuroPM box for the pseudotimes (disease progression scores)
pseudotimes = neuroPM_load_pseudotime_output_df(path = "../../NeuroPM_cPCA_files/fulldata cardiac run")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load output from neuroPM box for the pseudotimes (disease progression scores)
pseudotimes = neuroPM_load_pseudotime_output_df(path = "../../NeuroPM_cPCA_files/fulldata cardiac run")
View(pseudotimes)
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, 5000)
# load output from neuroPM box for the pseudotimes (disease progression scores)
pseudotimes = neuroPM_load_pseudotime_output_df(path = "../../NeuroPM_cPCA_files/fulldata cardiac run")
View(ukb_df_small)
View(pseudotimes)
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load output from neuroPM box for the pseudotimes (disease progression scores)
pseudotimes = neuroPM_load_pseudotime_output_df(path = "../../NeuroPM_cPCA_files/fulldata cardiac run")
View(pseudotimes)
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# merge pseudotime dataframe with ukb input into the neuroPM box
ukb_final_df = merge_pseudotime_with_ukb(pseudotime = pseudotimes,
ukb_df = ukb_df_small)
View(ukb_final_df)
head(colnames(ukb_final_df))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(ukb_final_df, "V1_pseudotimes", "bp_group",
title = "Disease Progression by Blood Pressure Group",
labels = c("Between", "Background", "Disease"),
save = FALSE, save_path = "")
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(ukb_final_df, "V1_pseudotimes", "bp_group",
title = "Disease Progression by Blood Pressure Group",
labels = c("Between", "Background", "Disease"))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(ukb_final_df, "V1_pseudotimes", "bp_group",
title = "Disease Progression by Blood Pressure Group",
labels = c("Between", "Background", "Disease"))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(data = ukb_final_df,
y = ukb_final_df$V1_pseudotimes,
group = ukb_final_df$bp_group,
title = "Disease Progression by Blood Pressure Group",
labels = c("Between", "Background", "Disease"))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(data = ukb_final_df,
y = ukb_final_df$V1_pseudotimes,
group = ukb_final_df$bp_group,
title = "Disease Progression by Blood Pressure Group",
xlab = "Blood Pressure Group", ylab = "Disease Score",
labels = c("Between", "Background", "Disease"))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(data = ukb_final_df,
y = ukb_final_df$V1_pseudotimes,
group = ukb_final_df$bp_group,
title = "Disease Progression by Blood Pressure Group",
xlab = "Blood Pressure Group", ylab = "Disease Score",
labels = c("Between", "Background", "Disease"))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(data = ukb_final_df,
y = ukb_final_df$V1_pseudotimes,
group = ukb_final_df$bp_group,
title = "Disease Progression by Blood Pressure Group",
xlab = "Blood Pressure Group", ylab = "Disease Score",
labels = c("Between", "Background", "Disease"))
source("postprocess_visualization.R")
# visualizations
plot_box_by_group(data = ukb_final_df,
y = ukb_final_df$V1_pseudotimes,
group = ukb_final_df$bp_group,
title = "Disease Progression by Blood Pressure Group",
xlab = "Blood Pressure Group", ylab = "Disease Score",
labels = c("Between", "Background", "Disease"))
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
source("postprocess_visualization.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# load output from neuroPM box for the pseudotimes (disease progression scores)
pseudotimes = neuroPM_load_pseudotime_output_df(path = "../../NeuroPM_cPCA_files/fulldata cardiac run")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
View(ukb_df)
?colMeans
?mean
# merge pseudotime dataframe with ukb input into the neuroPM box
ukb_final_df = merge_pseudotime_with_ukb(pseudotime = pseudotimes,
ukb_df = ukb_df_small)
source("preprocess_ml")
source("postprocess_visualization.R")
source("preprocess_ml.R")
source("preprocess_ml.R")
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
source("preprocess_ml.R")
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
df_dat = out$df_data
df_lab = out$df_label
View(df_lab)
source("preprocess_ml.R")
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
df_dat = out$df_data
df_lab = out$df_label
rm(list=ls())
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_ml.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_and_normalize_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
df_dat = out$df_data
df_lab = out$df_label
View(df_dat)
View(df_lab)
View(df_dat)
matrix(1,nrow=3,ncol=3)
matrix(1,nrow=3,ncol=3) * 5
matrix(1,nrow=3,ncol=3) * c(1,2,3)
matrix(1,nrow=3,ncol=3) / c(1,2,3)
colMeans(df,na.rm=TRUE)
source("preprocess_ml.R")
matrix(1,nrow=3,ncol=3) - c(1,2,3)
colStd
source("preprocess_ml.R")
# normalize data
df_dat = normalize_dataset(df_dat)
View(df_dat)
dim(df_Dat)
dim(df_dat)
?
sd
source("preprocess_ml.R")
df_dat = out$df_data
df_lab = out$df_label
# normalize data
df_dat = normalize_dataset(df_dat)
dim(df_dat)
View(head(df_dat))
View(head(ukb_df))
head((ukb_df$`21003-0.0` - mean(ukb_df$`21003-0.0`))/sd(ukb_df$`21003-0.0`))
source("preprocess_ml.R")
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
df_dat = out$df_data
df_lab = out$df_label
# normalize data
df_dat = normalize_dataset(df_dat)
View(head(df_dat))
names(df_dat)
df_dat
View(ukb_df)
source("preprocess_ml.R")
# split the data by data and labels
out = prepare_ukb_for_ml(ukb_df)
df_dat = out$df_data
df_lab = out$df_label
# normalize data
df_dat = normalize_dataset(df_dat)
install.packages("class")
source("preprocess_ml.R")
at
# split datainto train test
out = split_train_test(df_dat)
df_train = out$train
df_test = out$test
dim(df_test)
dim(df_train)
# split datainto train test
out = split_train_test(df_dat, test_percentage=0.1)
df_train = out$train
df_test = out$test
dim(df_train)
dim(df_test)
View(ukb_df)
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/src/main_ml.R")
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/src/main_ml.R")
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/src/main_ml.R")
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/src/main_ml.R")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_ml.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/src/main_ml.R")
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/src/main_ml.R")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
source("postprocess_visualization.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_and_normalize_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
?prcomp
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = 2000)
# compute pca
pca_out = prcomp(ukb_df_small[, 5:ncol(ukb_df_small)], center = TRUE, scale = TRUE)
pca_out
summary(pca_out)
summary(pca_out)
pca_out$sdev
summary(pca_out)
pca_out$sde
pca_out$rotation
head(pca_out$rotation)
head(pca_out$rotation)
head(pca_out)
pca_out$x
unname(pca_out$x)
View(pca_out)
head(unname(pca_out$x))
head(pca_out$x)
summary(pca_out)
summary(pca_out[1:5])
summary(pca_out[1:10])
summary(pca_out)
screeplot(wdbc.pr, type = "l", npcs = 15, main = "Screeplot of the first 10 PCs")
screeplot(pca_out, type = "l", npcs = 15, main = "Screeplot of the first 10 PCs")
screeplot(pca_out, type = "l", npcs = 20, main = "Screeplot of the first 10 PCs")
abline(h = 1, col="red", lty=5)
screeplot(pca_out, type = "l", npcs = 100, main = "Screeplot of the first 10 PCs")
abline(h = 1, col="red", lty=5)
plot(pca_out$x[,1], pca_out$x[,2], xlab="PC1", ylab = "PC2")
pca_out$x[,1]
dim(pca_out$x)
plot(pca_out$x[,1], pca_out$x[,2], xlab="PC1", ylab = "PC2",col=ukb_df_small$bp_group)
plot(pca_out$x[,1], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = ukb_df_small$bp_group, pch = 19)
plot(pca_out$x[,1], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = ukb_df_small$bp_group, pch = 10)
ukb_df_small$bp_group
colours = rep(0,nrow(ukb_df_small))
colours[ukb_df_small$bp_group==0] = "blue"
colours[ukb_df_small$bp_group==1] = "green"
colours[ukb_df_small$bp_group==2] = "red"
plot(pca_out$x[,1], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = colours, pch = 21)
plot(pca_out$x[,1], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = colours, pch = 19)
plot(pca_out$x[,3], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = colours, pch = 19)
plot(pca_out$x[,5], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = colours, pch = 19)
plot(pca_out$x[,5], pca_out$x[,4],
xlab="PC1", ylab = "PC2",
col = colours, pch = 19)
plot(pca_out$x[,1], pca_out$x[,2],
xlab="PC1", ylab = "PC2",
col = colours, pch = 19)
screeplot(pca_out, type = "l", npcs = 100, main = "Screeplot of the first 10 PCs")
abline(h = 1, col="red", lty=5)
?plot
screeplot(pca_out, type = "l", npcs = 1000, log = "y", main = "Screeplot of the first 10 PCs")
abline(h = 1, col="red", lty=5)
screeplot(pca_out, npcs = 1000, log = "y", main = "Screeplot of the first 10 PCs")
screeplot(pca_out, type = "l", npcs = 1000, log = "y", main = "Screeplot of the first 10 PCs")
abline(h = 1, col="red", lty=5)
screeplot(pca_out, type = "l", npcs = 150, log = "y", main = "Screeplot of the first 10 PCs")
abline(h = 1, col="red", lty=5)
