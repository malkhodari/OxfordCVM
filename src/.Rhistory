ukb_df = return_ukb_subset(df = ukb$ukb_data,
cols = ukb_filtered_cols, rows = ukb_filtered_rows)
View(ukb_df)
View(data_prep.1)
# load functions
source("preprocess_extract_variables.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_ukb_subset(df = ukb$ukb_data,
cols = c("Record.Id", "BPSys-2.0", "BPDia-2.0", ukb_filtered_cols),
rows = ukb_filtered_rows)
View(ukb_df)
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset=ukb_df,
target_criteria="all")
# load functions
source("preprocess_extract_variables.R")
# clean dataset of rows/columns with too many missing values
ukb_df = clean_NA_from_df(ukb,
threshold_col = 0.5, threshold_row = 0.05)
# clean dataset of rows/columns with too many missing values
ukb_df = clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
sum(is.na(ukb_df))/prod(size(ukb_df))
sum(is.na(ukb_df))/prod(dim(ukb_df))
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_ukb_subset(df = ukb$ukb_data,
cols = c("Record.Id", "BPSys-2.0", "BPDia-2.0", ukb_filtered_cols),
rows = ukb_filtered_rows)
sum(is.na(ukb_df))/prod(dim(ukb_df))
# clean dataset of rows/columns with too many missing values
ukb_df = clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
sum(is.na(ukb_df))/prod(dim(ukb_df))
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset=ukb_df,
target_criteria="all")
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
dim(ukb_df)
dim(labels)
length(labels)
nrow(ukb_df)
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# load functions
source("preprocess_extract_variables.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_ukb_subset(df = ukb$ukb_data,
cols = c("Record.Id", "BPSys-2.0", "BPDia-2.0", ukb_filtered_cols),
rows = ukb_filtered_rows)
sum(is.na(ukb_df))/prod(dim(ukb_df))
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
sum(is.na(ukb_df))/prod(dim(ukb_df))
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
nrow(ukb_df)
# load functions
source("preprocess_extract_variables.R")
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
labels
# get corresponding vector of labels depending on criteria
labels = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
table(labels)
# load functions
source("preprocess_filter_dataset.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = c("Record.Id",
"BPSys-2.0", "BPDia-2.0",
ukb_filtered_cols),
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
bp_group = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
bp_group
rm(list=ls())
# load functions
source("preprocess_filter_dataset.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# load functions
source("preprocess_filter_dataset.R")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = ukb_filtered_rows,
rows = ukb_filtered_rows)
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = ukb_filtered_rows,
rows = ukb_filtered_rows)
ukb_filtered_cols
which(!ukb_filtered_cols %in% colnames(ukb$ukb_data))
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
sum(is.na(ukb_df))/prod(dim(ukb_df))
# load functions
source("preprocess_filter_dataset.R")
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
# load functions
source("preprocess_filter_dataset.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5, threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
bp_group = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
rm(ukb)
rm(list=ls()
)
# load functions
source("preprocess_filter_dataset.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_dataset(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
#rm(ukb) # delete UKB variable from workspace to save RAM
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
bp_group = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# # use function to convert into neuroPM toolbox inputs (3 files)
# compute neighborhood variance
# #
# functions to perform cPCA
# # #http://www.bioconductor.org/packages/devel/bioc/vignettes/scPCA/inst/doc/scpca_intro.html
# calculate pseudotime score
# #
# load functions
source("preprocess_filter_dataset.R")
# get corresponding vector of labels depending on criteria
bp_group = get_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# load functions
source("preprocess_filter_dataset.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# load functions
source("preprocess_filter_dataset.R")
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# load functions
source("preprocess_filter_dataset.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
View(ukb_df)
tabulate(ukb_df$bp_group)
View(ukb_df)
table(ukb_df$bp_group)
table(ukb_df$bp_group)/nrow(ukb_df)
print(table(ukb_df$bp_group)/nrow(ukb_df))
?sample
return_fractional_df = function(df, N=5000) {
# this function returns a subset of the given data frame in case
# we only need a subset, or to reduce computational cost. The number
# sampled will be provided as input by N
# print proportion of class before subsetting
print(sprintf("Proportion of Each Class Before Subsetting"))
print(table(df$bp_group)/nrow(df)*100)
# create random vector of indices to subset
set.seed(0633)
ind = sample(1:nrow(df), N)
# index fraction of data frame
df = df[ind, ]
# print proportion of class before subsetting
print(sprintf("Proportion of Each Class After Subsetting"))
print(table(df$bp_group)/nrow(df)*100)
return(df)
}
#
ukb_df_small = return_fractional_df(ukb_df, 3000)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# in case we want to reduce computational cost, or test on a smaller sample
#
ukb_df_small = return_fractional_df(ukb_df, 3000)
# in case we want to reduce computational cost, or test on a smaller sample
#
ukb_df_small = return_fractional_df(ukb_df, 3000)
# in case we want to reduce computational cost, or test on a smaller sample
#
ukb_df_small = return_fractional_df(ukb_df, 3000)
View(ukb_df)
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
#rm(ukb) # delete UKB variable from workspace to save RAM
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
source("preprocess_neuroPM.R")
View(ukb_df)
View(ukb_df)
?print
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
file.path
?file.path
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
ukb_df_small = return_fractional_df(ukb_df, 3000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
#rm(ukb) # delete UKB variable from workspace to save RAM
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
##### for testing with NeuroPM Box
# reduce computational cost by only taking a fraction of whole dataset
# use function to convert and wrute into neuroPM toolbox inputs files (3 files)
if (FALSE) {
ukb_df_small = return_fractional_df(ukb_df, 3000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
}
# compute neighborhood variance
# #
# functions to perform cPCA
# # #http://www.bioconductor.org/packages/devel/bioc/vignettes/scPCA/inst/doc/scpca_intro.html
# calculate pseudotime score
# #
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
ukb$ukb_data$Sex
ukb$ukb_data[,"Sex"]
ukb$ukb_data[,"6150-2.0"]
ukb$ukb_data[,"diag_min_datedif"]
ukb$ukb_data[,"sex"]
ukb$ukb_data[,"sex]
_
)
))
]
""
"
ukb$ukb_data[,"31-0.0"]
class(ukb$ukb_data[,"31-0.0"])
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
View(ukb_df)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
View(ukb_df)
View(ukb_df)
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
?cat
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
source("preprocess_neuroPM.R")
ukb_df_small = return_fractional_df(ukb_df, 5000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "women")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_NA_from_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
ukb_df_small = return_fractional_df(ukb_df, 5000)
neuroPM_write_all_df(ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
file.path
