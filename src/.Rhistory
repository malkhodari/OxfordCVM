# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "cardiac")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
# background (1), target (2), between (0)
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# mean and standard deviation normalization for all feature columns (from 5th)
ukb_df = return_ukb_normalize_zscore(data = ukb_df)
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = 1000)
View(ukb_df_small)
dim(ukb_df_small)
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
bp_group = ukb_df_small$bp_group,
pat_ids = ukb_df_small$Record.Id,
colnames = colnames(ukd_df_small),
path = "../../NeuroPM_cPCA_files")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
bp_group = ukb_df_small$bp_group,
pat_ids = ukb_df_small$Record.Id,
colnames = colnames(ukd_df_small),
path = "../../NeuroPM_cPCA_files")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
pat_ids = ukb_df_small$Record.Id,
colnames = colnames(ukd_df_small),
path = "../../NeuroPM_cPCA_files")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
pat_ids = ukb_df_small$Record.Id,
colnames = colnames(ukb_df_small),
path = "../../NeuroPM_cPCA_files")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
# background (1), target (2), between (0)
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 140/80")
# get corresponding vector of labels depending on criteria
# background (1), target (2), between (0)
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
# mean and standard deviation normalization for all feature columns (from 5th)
ukb_df = return_ukb_normalize_zscore(data = ukb_df)
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
# background (1), target (2), between (0)
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
# mean and standard deviation normalization for all feature columns (from 5th)
ukb_df = return_ukb_normalize_zscore(data = ukb_df)
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = 2500)
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
pat_ids = ukb_df_small$Record.Id,
colnames = colnames(ukb_df_small),
path = "../../NeuroPM_cPCA_files")
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = nrow(ukb_df))
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
pat_ids = ukb_df_small$Record.Id,
colnames = colnames(ukb_df_small),
path = "../../NeuroPM_cPCA_files")
library(R.matlab)
return_fractional_df = function(df, N=5000) {
# this function returns a subset of the given data frame in case
# we only need a subset, or to reduce computational cost, or if we
# simply want to test on a smaller sample. The number sampled will be
# provided as input by N. This is mostly used for the neuroPM box
# preprocessing stage.
# print proportion of class before subsetting
cat("\n")
cat(sprintf("Proportion of Each Class Before Subsetting"))
print(table(df$bp_group)/nrow(df)*100)
cat("\n")
# create random vector of indices to subset
set.seed(0633)
ind = sample(1:nrow(df), N)
# index fraction of data frame
df = df[ind, ]
# print proportion of class before subsetting
cat(sprintf("Proportion of Each Class After Subsetting"))
print(table(df$bp_group)/nrow(df)*100)
cat("\n")
return(df)
}
neuroPM_convert_and_write_df = function(dat, dat_filename) {
# this function writes dataframes/vectors to the format
# required by the neuroPM toolbox given an input dataframe/matrix
# and its full path
write.table(formatC(as.matrix(dat), format = "e", digits = 7),
dat_filename,
row.names=FALSE, col.names=FALSE, quote=FALSE,
sep="\t")
}
neuroPM_write_all_df = function(df, labels, path) {
# given dataframe from ukb which has been post processed, write to
# the path given in the format of the neuroPM box input requirements
neuroPM_convert_and_write_df(df,
file.path(path, "cPCA_data.txt"))
neuroPM_convert_and_write_df(which(labels == 1),
file.path(path, "cPCA_background.txt"))
neuroPM_convert_and_write_df(which(labels == 2),
file.path(path, "cPCA_target.txt"))
}
neuroPM_matlab_write_all_df = function(df, col_from, path) {
# given a dataframe containing the filtered patient values of the UKB
# write the entire thing to one .mat output file to read into matlab
# and run on the matlab source code of the neuroPM toolbox
writeMat(file.path(path, "ukb_data.mat"),
data = as.matrix(df[, col_from:ncol(df)]),
bp_group = df$bp_group,
ids = df$Record.Id,
var_names = colnames(df[, col_from:ncol(df)]))
}
neuroPM_load_pseudotime_output_df = function(path) {
# read in neuroPM toolbox output and assign column names given the
# path to the directory containing the file
pseudotimes = read.table(file.path(
path,
"cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
)
names(pseudotimes) = c("row.id", "V1_pseudotimes", "traj1", "traj2")
# remove first column as it is only the row name
pseudotimes = pseudotimes[,-1]
return(pseudotimes)
}
merge_pseudotime_with_ukb = function(pseudotime, ukb_df) {
# given the processed pseudotime output from the neuroPM box, merge this
# with the original UKB data that was inputted so that we can perform
# futher visualization between the disease progression score and the
# various variables in the UKB
df_merged = cbind(pseudotime, ukb_df)
return(df_merged)
}
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "../../NeuroPM_cPCA_files")
?write.csv
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "../../NeuroPM_cPCA_files")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = 1000)#N = nrow(ukb_df))
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = 1000)#N = nrow(ukb_df))
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "../../NeuroPM_cPCA_files")
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = nrow(ukb_df))
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "../../NeuroPM_cPCA_files")
View(ukb_df_small)
<<<<<<< HEAD
# convert and write into neuroPM toolbox inputs files (3 files)
neuroPM_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "../../NeuroPM_cPCA_files")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load functions
source("preprocess_filter_dataset.R")
source("preprocess_neuroPM.R")
# load UKB datasets
ukb = load_raw_ukb_patient_dataset(path_ukb_data = "../../bb_data.csv",
path_ukb_vars = "../../bb_variablelist.csv")
# extract UKB columns (variables) we want to keep
ukb_filtered_cols = get_ukb_subset_column_names(df = ukb$ukb_data,
df_vars = ukb$ukb_vars,
subset_option = "all")
# extract UKB dataset rows (patients) we want to keep
ukb_filtered_rows = get_ukb_subset_rows(df = ukb$ukb_data,
subset_option = "all")
# subset UKB dataframe based on row/column filters, and remove missing
ukb_df = return_cols_rows_filter_df(df = ukb$ukb_data,
cols = ukb_filtered_cols,
rows = ukb_filtered_rows)
# clean dataset of rows/columns with too many missing values
ukb_df = return_clean_df(df = ukb_df,
threshold_col = 0.5,
threshold_row = 0.05)
# get corresponding vector of labels depending on criteria
# background (1), target (2), between (0)
ukb_df = return_ukb_target_background_labels(df_subset = ukb_df,
target_criteria = "> 160/100")
# mean and standard deviation normalization for all feature columns (from 5th)
ukb_df = return_ukb_normalize_zscore(data = ukb_df)
# reduce computational cost by only taking a fraction of whole dataset
ukb_df_small = return_fractional_df(ukb_df, N = 1000) #N = nrow(ukb_df))
# convert and write into neuroPM toolbox inputs files (3 files)
neuroPM_write_all_df(df = ukb_df_small[,5:ncol(ukb_df_small)], # from 5th column
labels = ukb_df_small$bp_group,
path = "../../NeuroPM_cPCA_files")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "/fmrib/io")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "/fmrib/io")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "/fmrib/io")
# convert and write into .mat file for matlab source code of neuroPM box
neuroPM_matlab_write_all_df(df = ukb_df_small,
col_from = 5, # from 5th column
path = "fmrib/io")
=======
>>>>>>> 89651060d807fe4ed6e4fcdf75e388f4ca5d5dfc
