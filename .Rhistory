as.character(target_Record.Id.1))
)
]
# # > 160/100
# target_Record.Id.2 = df$Record.Id[df$`BPSys-2.0` > 160 |
#                                   df$`BPDia-2.0` > 100]
# background_Record.Id.2 = df$Record.Id[df$`BPSys-2.0` < 120 &
#                                       df$`BPDia-2.0` < 80]
# between_Record.Id.2 = df$Record.Id[
#                           -which(df$Record.Id %in%
#                                    c(as.character(background_Record.Id.2),
#                                      as.character(target_Record.Id.2))
#                                  )
#                           ]
#
# # target: event at time of imaging. Background: no event, no event on follow
# target_Record.Id.3 = df$Record.Id[df$`6150-2.0` > 0 & df$`6150-2.0` < 4]
# background_Record.Id.3 = df$Record.Id[(df$`6150-2.0` < 0 |
#                                        df$`6150-2.0` == 4) &
#                                       (df$`6150-3.0` < 0 |
#                                        df$`6150-3.0`==4)]
# between_Record.Id.3 = df$Record.Id[
#                           -which(df$Record.Id %in%
#                                    c(as.character(background_Record.Id.3),
#                                      as.character(target_Record.Id.3))
#                                  )
#                           ]
#
# # target: no event at time of imaging, but at follow-up. Background: no event,
# # no event on follow-up, low BP
# target_Record.Id.4 = df$Record.Id[
#                           (df$`6150-2.0` > 0 & df$`6150-2.0` < 4) &
#                           (df$`6150-3.0` > 0 | df$`6150-3.0` < 4)]
# background_Record.Id.4 = df$Record.Id[
#                                 (df$`6150-2.0` < 0 | df$`6150-2.0` == 4) &
#                                 (df$`6150-3.0`<0|df$`6150-3.0` == 4)]
# between_Record.Id.4 = df$Record.Id[
#                             -which(df$Record.Id %in%
#                                      c(as.character(background_Record.Id.4),
#                                        as.character(target_Record.Id.4))
#                                    )
#                             ]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# The code below is refactored from the DP_prep2.R
#     This script obtains a filtered dataset based on the variables
#     generated in the script above, and also filters the dataset for
#     to remove rows with missing values.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
DP_prep_cross3 <- function(data_dp,
vars_included,
target_Record.Id,
background_Record.Id,
cov,
perc_mis = 5) {
# This function cleans up the raw UKB data, removes columns
# with too many missing data, keeps only the relevant variables
# defined above, and also arranges the blood pressure groups
# into 0 = between, 2 = diseased (target), 1 = background
# exclude columns with majority NA, for studies separately
for (study in unique(data_dp$StudyName)) {
a = which(colMeans(is.na(
data_dp[data_dp$StudyName == study,
which(names(data_dp) %in% vars_included)]
)) > 0.5)
if (length(a) > 0) {
data_dp = data_dp[, -which(names(data_dp) %in% names(a))]
}
# exclude columns with only NA, for studies separately
b = which(colSums(
is.na(data_dp[data_dp$StudyName == study, ]) |
data_dp[data_dp$StudyName == study, ] == 0
) == nrow(data_dp[data_dp$StudyName == study, ])
)
if (length(b) > 0) {
data_dp = data_dp[, -which(names(data_dp) %in% names(b))]
}
}
# remove rows with more than ... missing data
# exclude subjects with >??% missing data (default=5%)
c = apply(data_dp, MARGIN = 1, function(x) sum(is.na(x)))
d = c < (length(c)/100*perc_mis)
data_dp = data_dp[d, ]
# code bp_group
data_dp$bp_group = 0
data_dp$bp_group[data_dp$Record.Id %in% target_Record.Id] = 2
data_dp$bp_group[data_dp$Record.Id %in% background_Record.Id] = 1
colnames = names(data_dp)[names(data_dp) %in% vars_included]
data_dp = data_dp[,c("Record.Id", "StudyName", colnames, "bp_group")]
list = list("data" = data_dp)
if(missing(cov) == FALSE) {
## delete subjects with missing data for covariates
data_dp = data_dp[complete.cases(data_dp[, cov]), ]
cov_2 = data_dp[, cov]
list[[cov]] = cov_2
}
return(list)
}
bb_subset <- function(dataset,
n_target=1000,
n_background=1000,
n_between=200){
# This function subsets the data by extracting N samples from each
# of the groups target, background, and between
target_Record.Id = dataset$Record.Id[dataset$bp_group == 2]
background_Record.Id = dataset$Record.Id[dataset$bp_group == 1]
between_Record.Id = dataset$Record.Id[dataset$bp_group == 0]
# get the first N data by sorting entire dataset by target
c = sort(apply(dataset[dataset$Record.Id %in% target_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
d = dataset[names(c[1:n_target]), "Record.Id"]
# get the first N data by sorting entire dataset by background
f = sort(apply(dataset[dataset$Record.Id %in% background_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
g = dataset[names(f[1:n_background]), "Record.Id"]
# get the first N data by sorting entire dataset by between
i = sort(apply(dataset[dataset$Record.Id %in% between_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
j = dataset[names(i[1:n_between]), "Record.Id"]
# combine the 3 individual sets
Record.Id_subset = dataset[dataset$Record.Id %in%
c(as.character(d),
as.character(g),
as.character(j))
,]
return(Record.Id_subset)
}
bb_DP_prep2 = function(dataset,
target_Record.Id,
background_Record.Id,
between_Record.Id,
variables,
n_target=1000, n_background=1000, n_between=200) {
# this function uses the two functions above DP_prep_cross3 and
# bb_subset to process the raw data given a set of variables,
# background, and targets
target_Record.Id = target_Record.Id[!is.na(target_Record.Id)]
background_Record.Id = background_Record.Id[!is.na(background_Record.Id)]
between_Record.Id = between_Record.Id[!is.na(between_Record.Id)]
data_dp = DP_prep_cross3(dataset, variables,
target_Record.Id,
background_Record.Id)
data = list("fulldata" = data_dp$data)
data$cov = data_dp$cov
# take the 1000 target and 1000 background subjects
# with most complete data + 200 in between
data$sub = bb_subset(data$fulldata, n_target, n_background, n_between)
return(data)
}
write2neuroPM = function(dat, dat_filename) {
# this function writes dataframes/vectors to the format
# required by the neuroPM toolbox
write.table(formatC(as.matrix(dat), format = "e", digits = 7),
dat_filename,
row.names=FALSE, col.names=FALSE, quote=FALSE,
sep="\t")
}
# 1.a.1 = all subjects, all variables, 140/90 vs <120/80
# produce full filtered dataset and subset of filtered dataset
model1.a.1 = bb_DP_prep2(data_prep.1,
target_Record.Id.1, background_Record.Id.1,
between_Record.Id.1, variables.a)
dat_out = model1.a.1$fulldata[,3:ncol(model1.a.1$fulldata)]
dat_out[is.na(dat_out)] = -999999
# write to output for neuroPM toolbox
write2neuroPM(dat_out,
"../NeuroPM_cPCA_files/cPCA_data.txt")
write2neuroPM(which(dat_out$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt")
write2neuroPM(which(dat_out$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# The code below is refactored from the DP_results.R
#
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("Record.Id","bp_group","V1_pseudotimes")
pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
### with BP
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPSys-2.0`,
color = as.factor(bp_group))) +
geom_point() +
scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank())
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPDia-2.0`,
color = as.factor(bp_group))) +
geom_point() + scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank())
View(pseudotimes)
?merge
View(colnames(pseudotimes))
View(data.frame(colnames(pseudotimes)))
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("Record.Id","bp_group","V1_pseudotimes")
View(df)
View(pseudotimes)
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
dim(model1.a.1$fulldata)
dim(model1.a.1$subset)
dim(model1.a.1$sub)
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes, model1.a.1$sub)
colnames(model1.a.1$sub)
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("V1_pseudotimes","Record.Id","bp_group")
View(data.frame(colnames(model1.a.1$sub)))
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
### with BP
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPSys-2.0`,
color = as.factor(bp_group))) +
geom_point() +
scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank())
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes, model1.a.1$sub)
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("V1_pseudotimes","Record.Id","bp_group")
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes[,-3], model1.a.1$sub)
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
View(pseudotimes)
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("V1_pseudotimes","Record.Id","bp_group")
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes$V1_pseudotimes, model1.a.1$sub)
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
View(pseudotimes)
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("V1_pseudotimes","Record.Id","bp_group")
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes[,1], model1.a.1$sub)
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
View(pseudotimes)
View(pseudotimes)
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
names(pseudotimes) = c("Record.Id","V1_pseudotimes","unknown","bp_group")
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes, model1.a.1$sub)
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
names(pseudotimes) = c("Record.Id","V1_pseudotimes","unknown","bp_group")
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes[,-1], model1.a.1$sub)
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
names(pseudotimes) = c("Record.Id","V1_pseudotimes","unknown","bp_group")
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(pseudotimes[,2], model1.a.1$sub)
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(V1_pseudotimes=pseudotimes[,2], model1.a.1$sub)
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
# per bp_group
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
png(filename="p1.png")
p1 = ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
dev.off()
p1 = ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
png(filename="p1.png")
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
dev.off()
# per bp_group
pdf("p1.pdf", width = 20, height = 10)
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
dev.off()
### with BP
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPSys-2.0`,
color = as.factor(bp_group))) +
geom_point() +
scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank())
bb_BMR_vars
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group)))
V1_pseudotimes
View(pseudotimes)
# read in neuroPM toolbox output
pseudotimes = read.table("../NeuroPM_cPCA_files/subset run/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
names(pseudotimes) = c("Record.Id","V1_pseudotimes","unknown","bp_group")
# merge with UKB data
#pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
pseudotimes = cbind(V1_pseudotimes=pseudotimes[,2], model1.a.1$sub)
per bp_group
pdf("p1.pdf", width = 20, height = 10)
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
dev.off()
outvars = bb_BMR_vars
table = NULL
for (outvar in outvars){
formula = as.formula(paste0("`", outvar, "`" , "~", "V1_pseudotimes"))
linMod = glm(formula, data = pseudotimes)
# Summary of the analysis
b = unname(summary(linMod)$coefficients["V1_pseudotimes",])
c = c(outvar,b)
if (c[5] < 0.05){
table=rbind(table,c)
}
}
colnames(table) = c("Variable", "Estimate", "Std.Error", "t value", "Pr(>|t|")
table = as.data.frame(table)
rownames(table) = table$Variable
print(table)
formula
table
outvars
head(outvars)
View(pseudotimes)
View(model1.a.1$sub)
