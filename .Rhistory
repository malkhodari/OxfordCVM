bb_ecgrest_vars,Sex,Age)]
# cardiac
variables.b = vars_2[vars_2 %in% c(bb_CMR_vars, bb_art_vars, bb_car_vars)]
# brain
variables.c = vars_2[vars_2 %in% bb_BMR_vars]
# cardiac + brain + carotid ultrasound
variables.d = vars_2[vars_2 %in% c(bb_CMR_vars,bb_BMR_vars,
bb_art_vars,bb_car_vars,Sex,Age)]
### population variables
# all
data_prep.1 = df[df$Record.Id %in%
df$Record.Id[!is.na(df$`BPSys-2.0`)], ]
# # only women
# data_prep.2 = df[df$Record.Id %in%
#                    df$Record.Id[!is.na(df$`BPSys-2.0`) & df[,Sex]=="0"]
#                  , ]
#
# # only men
# data_prep.3 = df[df$Record.Id %in%
#                    df$Record.Id[!is.na(df$`BPSys-2.0`) & df[,Sex]=="1"]
#                  , ]
#
# # exclude those with heart attack/angina/stroke at time of imaging
# data_prep.4 = df[df$Record.Id %in%
#                    df$Record.Id[
#                          !is.na(df$`BPSys-2.0`) &
#                          (df$`6150-2.0` < 0 |
#                           df$`6150-2.0` > 3 |
#                           is.na(df$`6150-2.0`)) &
#                          (df$diag_min_datedif > 0 |
#                           is.na(df$diag_min_datedif))
#                       ]
#                  , ]
#
# # only women: exclude those with heart attack/angina/stroke at
# # time of imaging
# data_prep.5 = df[df$Record.Id %in%
#                    df$Record.Id[
#                      !is.na(df$`BPSys-2.0`) &
#                      df[,Sex]=="0" &
#                     (df$`6150-2.0` < 0 |
#                      df$`6150-2.0` > 3 |
#                      is.na(df$`6150-2.0`)) &
#                     (df$diag_min_datedif > 0 |
#                       is.na(df$diag_min_datedif))
#                     ]
#                  , ]
### target/background criteria
# > 140/80
target_Record.Id.1 = df$Record.Id[df$`BPSys-2.0` > 140 |
df$`BPDia-2.0` > 90]
background_Record.Id.1 = df$Record.Id[df$`BPSys-2.0` < 120 &
df$`BPDia-2.0` < 80]
between_Record.Id.1 = df$Record.Id[
-which(df$Record.Id %in%
c(as.character(background_Record.Id.1),
as.character(target_Record.Id.1))
)
]
# # > 160/100
# target_Record.Id.2 = df$Record.Id[df$`BPSys-2.0` > 160 |
#                                   df$`BPDia-2.0` > 100]
# background_Record.Id.2 = df$Record.Id[df$`BPSys-2.0` < 120 &
#                                       df$`BPDia-2.0` < 80]
# between_Record.Id.2 = df$Record.Id[
#                           -which(df$Record.Id %in%
#                                    c(as.character(background_Record.Id.2),
#                                      as.character(target_Record.Id.2))
#                                  )
#                           ]
#
# # target: event at time of imaging. Background: no event, no event on follow
# target_Record.Id.3 = df$Record.Id[df$`6150-2.0` > 0 & df$`6150-2.0` < 4]
# background_Record.Id.3 = df$Record.Id[(df$`6150-2.0` < 0 |
#                                        df$`6150-2.0` == 4) &
#                                       (df$`6150-3.0` < 0 |
#                                        df$`6150-3.0`==4)]
# between_Record.Id.3 = df$Record.Id[
#                           -which(df$Record.Id %in%
#                                    c(as.character(background_Record.Id.3),
#                                      as.character(target_Record.Id.3))
#                                  )
#                           ]
#
# # target: no event at time of imaging, but at follow-up. Background: no event,
# # no event on follow-up, low BP
# target_Record.Id.4 = df$Record.Id[
#                           (df$`6150-2.0` > 0 & df$`6150-2.0` < 4) &
#                           (df$`6150-3.0` > 0 | df$`6150-3.0` < 4)]
# background_Record.Id.4 = df$Record.Id[
#                                 (df$`6150-2.0` < 0 | df$`6150-2.0` == 4) &
#                                 (df$`6150-3.0`<0|df$`6150-3.0` == 4)]
# between_Record.Id.4 = df$Record.Id[
#                             -which(df$Record.Id %in%
#                                      c(as.character(background_Record.Id.4),
#                                        as.character(target_Record.Id.4))
#                                    )
#                             ]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# The code below is refactored from the DP_prep2.R
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
DP_prep_cross3 <- function(data_dp,
vars_included,
target_Record.Id,
background_Record.Id,
perc_mis,
cov) {
if(missing(perc_mis)) perc_mis = 5
# exclude columns with majority NA, for studies separately
for (study in unique(data_dp$StudyName)) {
a = which(colMeans(is.na(
data_dp[data_dp$StudyName == study,
which(names(data_dp) %in% vars_included)]
)) > 0.5)
if (length(a) > 0) {
data_dp = data_dp[, -which(names(data_dp) %in% names(a))]
}
# exclude columns with only NA, for studies separately
b = which(colSums(
is.na(data_dp[data_dp$StudyName == study, ]) |
data_dp[data_dp$StudyName == study, ] == 0
) == nrow(data_dp[data_dp$StudyName == study, ])
)
if (length(b) > 0) {
data_dp = data_dp[, -which(names(data_dp) %in% names(b))]
}
}
# remove rows with more than ... missing data
c = apply(data_dp, MARGIN = 1, function(x) sum(is.na(x)))
d = c < (length(c)/100*perc_mis)
data_dp = data_dp[d, ]
# code bp_group
data_dp$bp_group = 0
data_dp$bp_group[data_dp$Record.Id %in% target_Record.Id] = 2
data_dp$bp_group[data_dp$Record.Id %in% background_Record.Id] = 1
colnames = names(data_dp)[names(data_dp) %in% vars_included]
data_dp = data_dp[,c("Record.Id", "StudyName", colnames, "bp_group")]
list = list("data" = data_dp)
if(missing(cov) == FALSE) {
## delete subjects with missing data for covariates
data_dp = data_dp[complete.cases(data_dp[, cov]), ]
cov_2 = data_dp[, cov]
list[[cov]] = cov_2
}
return(list)
} ## also exclude subjects with >??% missing data (default=5%)
bb_subset <- function(dataset,
n_target=1000,
n_background=1000,
n_between=200){
target_Record.Id = dataset$Record.Id[dataset$bp_group == 2]
background_Record.Id = dataset$Record.Id[dataset$bp_group == 1]
between_Record.Id = dataset$Record.Id[dataset$bp_group == 0]
c = sort(apply(dataset[dataset$Record.Id %in% target_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
d = dataset[names(c[1:n_target]), "Record.Id"]
f = sort(apply(dataset[dataset$Record.Id %in% background_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
g = dataset[names(f[1:n_background]), "Record.Id"]
i = sort(apply(dataset[dataset$Record.Id %in% between_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
j = dataset[names(i[1:n_between]), "Record.Id"]
Record.Id_subset = dataset$Record.Id[dataset$Record.Id %in%
c(as.character(d),
as.character(g),
as.character(j))
]
return(Record.Id_subset)
}
bb_DP_prep2 = function(dataset,
target_Record.Id,
background_Record.Id,
between_Record.Id,
variables,
n_target=1000, n_background=1000, n_between=200) {
target_Record.Id = target_Record.Id[!is.na(target_Record.Id)]
background_Record.Id = background_Record.Id[!is.na(background_Record.Id)]
between_Record.Id = between_Record.Id[!is.na(between_Record.Id)]
data_dp = DP_prep_cross3(dataset, variables,
target_Record.Id,
background_Record.Id)
data = list("fulldata" = data_dp$data)
data$cov = data_dp$cov
# take the 1000 target and 1000 background subjects
# with most complete data + 200 in between
data$sub = bb_subset(data$fulldata, n_target, n_background, n_between)
return(data)
}
## 1.a.1 = all subjects, all variables, 140/90 vs <120/80
model1.a.1 = bb_DP_prep2(data_prep.1,
target_Record.Id.1, background_Record.Id.1,
between_Record.Id.1, variables.a)
#View(model1.a.1$fulldata)
write.xlsx(model1.a.1$sub, "data_sub.xlsx")
target_Record.Id.1
dim(target_Record.Id.1)
size(target_Record.Id.1)
length(target_Record.Id.1)
length(background_Record.Id.1)
length(between_Record.Id.1)
colnames(df)
which(colnames(df) == "BPDia-2.0")
View(df)
View(df[,3550:ncol(df)])
dim(model1.a.1$sub)
size(model1.a.1$sub)
nrow(model1.a.1$sub)
ncol(model1.a.1$sub)
model1.a.1$sub
length(model1.a.1$sub)
dim(model1.a.1$fulldata)
View(model1.a.1$fulldata)
View(model1.a.1$fulldata)
unique(model1.a.1$fulldata$bp_group)
?write.csv
write.csv(model1.a.1$fulldata,"cPCA_data",row.names=FALSE)
write.csv(model1.a.1$fulldata,"cPCA_data.csv",row.names=FALSE)
write.csv(model1.a.1$fulldata, "../NeuroPM_cPCA_files/cPCA_data.csv",
row.names=FALSE)
data_prep.1
ncol(data_prep.1)
dim(data_prep.1)
?missing
missing(NA)
missing()
missing(c())
missing(temp)
target_Record.Id
model1.a.1$sub
length(model1.a.1$sub)
dim(model1.a.1$fulldata)
model1.a.1$fulldata$bp_group == 1
as.numeric(model1.a.1$fulldata$bp_group == 1)
write.csv(as.numeric(model1.a.1$fulldata$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.csv",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$fulldata$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.csv",
row.names=FALSE)
write.csv(model1.a.1$fulldata, "../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$fulldata$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$fulldata$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt",
row.names=FALSE)
?write.table
write.table(model1.a.1$fulldata, "../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
bb_subset <- function(dataset,
n_target=1000,
n_background=1000,
n_between=200){
# This function subsets the data by extracting N samples from each
# of the groups target, background, and between
target_Record.Id = dataset$Record.Id[dataset$bp_group == 2]
background_Record.Id = dataset$Record.Id[dataset$bp_group == 1]
between_Record.Id = dataset$Record.Id[dataset$bp_group == 0]
# get the first N data by sorting entire dataset by target
c = sort(apply(dataset[dataset$Record.Id %in% target_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
d = dataset[names(c[1:n_target]), "Record.Id"]
# get the first N data by sorting entire dataset by background
f = sort(apply(dataset[dataset$Record.Id %in% background_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
g = dataset[names(f[1:n_background]), "Record.Id"]
# get the first N data by sorting entire dataset by between
i = sort(apply(dataset[dataset$Record.Id %in% between_Record.Id, ],
MARGIN = 1,
function(x) sum(is.na(x))
)
)
j = dataset[names(i[1:n_between]), "Record.Id"]
# combine the 3 individual sets
Record.Id_subset = dataset[dataset$Record.Id %in%
c(as.character(d),
as.character(g),
as.character(j))
,]
return(Record.Id_subset)
}
bb_DP_prep2 = function(dataset,
target_Record.Id,
background_Record.Id,
between_Record.Id,
variables,
n_target=1000, n_background=1000, n_between=200) {
# this function uses the two functions above DP_prep_cross3 and
# bb_subset to process the raw data given a set of variables,
# background, and targets
target_Record.Id = target_Record.Id[!is.na(target_Record.Id)]
background_Record.Id = background_Record.Id[!is.na(background_Record.Id)]
between_Record.Id = between_Record.Id[!is.na(between_Record.Id)]
data_dp = DP_prep_cross3(dataset, variables,
target_Record.Id,
background_Record.Id)
data = list("fulldata" = data_dp$data)
data$cov = data_dp$cov
# take the 1000 target and 1000 background subjects
# with most complete data + 200 in between
data$sub = bb_subset(data$fulldata, n_target, n_background, n_between)
return(data)
}
## 1.a.1 = all subjects, all variables, 140/90 vs <120/80
model1.a.1 = bb_DP_prep2(data_prep.1,
target_Record.Id.1, background_Record.Id.1,
between_Record.Id.1, variables.a)
View(model1.a.1$sub)
size(model1.a.1$sub)
dim(model1.a.1$sub)
dim(model1.a.1$fulldata)
write.table(model1.a.1$fulldata, "../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$fulldata$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$fulldata$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt",
row.names=FALSE)
write.table(model1.a.1$sub, "../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$sub$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$sub$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt",
row.names=FALSE)
View(df)
View(data.frame(variables.a))
View(data.frame(sort(variables.a)))
temp = df[!is.na(df$`BPSys-2.0`), ]
target_Record.Id.1
vars_2
bb_CMR_vars
## 1.a.1 = all subjects, all variables, 140/90 vs <120/80
model1.a.1 = bb_DP_prep2(data_prep.1,
target_Record.Id.1, background_Record.Id.1,
between_Record.Id.1, variables.a)
write.table(model1.a.1$sub, "../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$sub$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt",
row.names=FALSE)
write.csv(as.numeric(model1.a.1$sub$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt",
row.names=FALSE)
View(model1.a.1$sub[2:nrow(model1.a.1$sub),3:ncol(model1.a.1$sub)])
write.table(model1.a.1$sub[,3:ncol()],
"../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
write.table(model1.a.1$sub[,3:ncol(model1.a.1$sub)],
"../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE)
write.table(model1.a.1$sub[,3:ncol(model1.a.1$sub)],
"../NeuroPM_cPCA_files/cPCA_data.txt",
row.names=FALSE,col.names=FALSE)
View(model1.a.1$sub[,3:ncol(model1.a.1$sub)])
formatC(1.1, format = "e", digits = 2
)
formatC(1.1, format = "e", digits = 7)
formatC(c(1.1,2.2), format = "e", digits = 7)
which(model1.a.1$sub$bp_group == 1)
source("C:/Users/zxiong/OneDrive - Nexus365/OxfordCVM/winok_refractored.R")
write2neuroPM = function(dat, dat_filename) {
write.table(formatC(dat, format = "e", digits = 7), dat_filename,
row.names=FALSE,col.names=FALSE)
}
write2neuroPM(model1.a.1$sub[,3:ncol(model1.a.1$sub)],
"../NeuroPM_cPCA_files/cPCA_data.txt")
write2neuroPM(which(model1.a.1$sub$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt")
write2neuroPM(as.numeric(model1.a.1$sub$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt")
write2neuroPM = function(dat, dat_filename) {
write.table(formatC(as.matrix(dat), format = "e", digits = 7), dat_filename,
row.names=FALSE, col.names=FALSE, quote=FALSE)
}
write2neuroPM(model1.a.1$sub[,3:ncol(model1.a.1$sub)],
"../NeuroPM_cPCA_files/cPCA_data.txt")
View(df)
View(model1.a.1)
View(model1.a.1[["sub"]])
dat_out = model1.a.1$sub
dat_out = model1.a.1$sub[,3:ncol(model1.a.1$sub)]
View(dat_out)
min(dat_out)
min(dat_out,na.rm=TRUE)
dat_out[is.na(dat_out)] = -99999
write2neuroPM(dat_out,
"../NeuroPM_cPCA_files/cPCA_data.txt")
?formatC
?write.table
write2neuroPM = function(dat, dat_filename) {
# this function writes dataframes/vectors to the format
# required by the neuroPM toolbox
write.table(formatC(as.matrix(dat), format = "e", digits = 7),
dat_filename,
row.names=FALSE, col.names=FALSE, quote=FALSE,
sep="\t")
}
## 1.a.1 = all subjects, all variables, 140/90 vs <120/80
model1.a.1 = bb_DP_prep2(data_prep.1,
target_Record.Id.1, background_Record.Id.1,
between_Record.Id.1, variables.a)
dat_out = model1.a.1$sub[,3:ncol(model1.a.1$sub)]
dat_out[is.na(dat_out)] = -99999
write2neuroPM(dat_out,
"../NeuroPM_cPCA_files/cPCA_data.txt")
write2neuroPM(which(dat_out$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt")
write2neuroPM(as.numeric(dat_out$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt")
write2neuroPM(which(dat_out$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt")
variables.a
pseudotimes=read.csv("../NeuroPM_cPCA_files/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
View(pseudotimes)
pseudotimes=read.table("../NeuroPM_cPCA_files/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
?read.table
View(pseudotimes)
pseudotimes = pseudotimes[-1,]
pseudotimes = read.table("../NeuroPM_cPCA_files/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
View(pseudotimes)
names(pseudotimes) = c("Record.Id","bp_group","V1_pseudotimes")
library(dplyr)
pseudotimes = merge(pseudotimes, bb_data, all.x=TRUE, by = "Record.Id")
pseudotimes = merge(pseudotimes, df, all.x=TRUE, by = "Record.Id")
View(df)
View(pseudotimes)
pseudotimes = read.table("../NeuroPM_cPCA_files/cTI_IDs_pseudotimes_pseudopaths_cPCA_data.txt")
pseudotimes = pseudotimes[,-1]
names(pseudotimes) = c("Record.Id","bp_group","V1_pseudotimes")
View(pseudotimes)
ggplot(pseudotimes, aes(y=V1_pseudotimes,x=as.factor(bp_group),fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),labels=c("Other","Healthy","Disease")) +
ggtitle(paste(model,"disease category and BP",sep=" ")) +
theme(legend.title = element_blank(), axis.text.x = element_blank(),axis.title.x=element_blank())
library(ggplot2)
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle(paste(model,"disease category and BP",sep=" ")) +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
ggplot(pseudotimes, aes(y=V1_pseudotimes,
x=as.factor(bp_group),
fill=as.factor(bp_group))) +
geom_boxplot() +
geom_point(aes(fill=as.factor(bp_group)),
position=position_jitterdodge()) +
scale_fill_discrete(breaks=c("0","1","2"),
labels=c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank(),
axis.text.x = element_blank(),
axis.title.x=element_blank())
dat_out = model1.a.1$fulldata[,3:ncol(model1.a.1$fulldata)]
dat_out[is.na(dat_out)] = -999999
# write to output for neuroPM toolbox
write2neuroPM(dat_out,
"../NeuroPM_cPCA_files/cPCA_data.txt")
write2neuroPM(which(dat_out$bp_group == 1),
"../NeuroPM_cPCA_files/cPCA_background.txt")
write2neuroPM(which(dat_out$bp_group == 2),
"../NeuroPM_cPCA_files/cPCA_target.txt")
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPDia-2.0`,
color = as.factor(bp_group))) +
geom_point() + scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle(paste(model, "DP score and Diastolic BP", sep = " ")) +
theme(legend.title = element_blank())
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPSys-2.0`,
color = as.factor(bp_group))) +
geom_point() +
scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank())
ggplot(pseudotimes,aes(x = V1_pseudotimes,
y = `BPDia-2.0`,
color = as.factor(bp_group))) +
geom_point() + scale_color_discrete(breaks = c("0","1","2"),
labels = c("Other","Healthy","Disease")) +
ggtitle("all subjects all variables: disease category and BP") +
theme(legend.title = element_blank())
